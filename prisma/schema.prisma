// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  emailVerified   DateTime?
  passwordHash    String?
  image           String?
  phone           String?          
  jobTitle        String? 
  linkedinUrl     String?
  githubUsername  String? 
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  accounts        Account[]
  sessions        Session[]
  jobApplications JobApplication[]
  resumes         ResumeVersion[]
  coverLetters    CoverLetter[]
  subscriptions   Subscription[]
  passwordResets  PasswordReset[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model JobApplication {
  id            String             @id @default(uuid())
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  title         String
  company       String
  jobLink       String?
  description   String?
  status        JobStatus
  appliedAt     DateTime?
  notes         ApplicationNote[]
  resumes       ResumeVersion[]
  coverLetters  CoverLetter[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model ApplicationNote {
  id        String          @id @default(uuid())
  job       JobApplication  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  note      String
  createdAt DateTime        @default(now())
}

model ResumeVersion {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  job           JobApplication? @relation(fields: [jobId], references: [id])
  jobId         String?
  content       String
  isAiGenerated Boolean         @default(true)
  createdAt     DateTime        @default(now())
}

model CoverLetter {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  job           JobApplication? @relation(fields: [jobId], references: [id])
  jobId         String?
  content       String
  isAiGenerated Boolean         @default(true)
  createdAt     DateTime        @default(now())
}

model Subscription {
  id                 String     @id @default(uuid())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String     @unique
  plan               Plan
  status             SubscriptionStatus
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier         String
  token              String     @unique
  expires            DateTime

  @@unique([identifier, token])
  @@index([identifier])
}

model PasswordReset {
  id                 String     @id @default(uuid())
  userId             String
  token              String     @unique
  expires            DateTime
  createdAt          DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model RateLimit {
  id                 String     @id @default(uuid())
  identifier         String     // e.g., "register:192.168.1.1"
  count              Int        @default(1)
  resetTime          DateTime
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@unique([identifier])
  @@index([identifier, resetTime])
}

enum JobStatus {
  applied
  interviewing
  offer
  rejected
}

enum Plan {
  free
  pro
  enterprise
}

enum SubscriptionStatus {
  active
  canceled
  past_due
}