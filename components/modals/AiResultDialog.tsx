"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/ClientDialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

import { AiResultDialogProps } from "@/types/globals";

const AiResultDialog = ({
  selectedJobId,
  open,
  onOpenChange,
  aiResult,
  mutate,
}: AiResultDialogProps) => {
  const [copiedSection, setCopiedSection] = useState<null | "resume" | "cover">(
    null
  );
  const [resumeState, setResumeState] = useState<"idle" | "loading" | "saved">(
    "idle"
  );
  const [coverState, setCoverState] = useState<"idle" | "loading" | "saved">(
    "idle"
  );

  const handleCopy = (text: string, section: "resume" | "cover") => {
    navigator.clipboard.writeText(text);
    setCopiedSection(section);

    setTimeout(() => setCopiedSection(null), 5000);
  };

  const handleSaveResume = async () => {
    if (!aiResult) return;
    setResumeState("loading");
    try {
      await fetch(`/api/jobs/${selectedJobId}/resume-save`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          content: aiResult.resume,
          isAiGenerated: aiResult.isAiGenerated,
        }),
      });
      toast.success("Successfully saved resume. Check it in the job detail page.");
      setResumeState("saved");
      mutate?.();
    } catch (err) {
      toast.error("Something went wrong. Failed to save resume.");
      console.error("Error saving resume:", err);
      setResumeState("idle");
    }
  };

  const handleSaveCoverLetter = async () => {
    if (!aiResult) return;
    setCoverState("loading");
    try {
      await fetch(`/api/jobs/${selectedJobId}/cover-letter-save`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          content: aiResult.coverLetter,
          isAiGenerated: aiResult.isAiGenerated,
        }),
      });
      toast.success("Successfully saved cover letter. Check it in the job detail page.");
      setCoverState("saved");
      mutate?.();
    } catch (err) {
      toast.error("Something went wrong. Failed to save cover letter.");
      console.error("Error saving cover letter:", err);
      setCoverState("idle");
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl p-0">
        <ScrollArea className="max-h-[90vh]">
          <div className="p-6 flex flex-col gap-8 pb-24">
            <DialogHeader>
              <DialogTitle>AI Suggestions</DialogTitle>
              {aiResult && (
                <p className="text-xs text-muted-foreground mt-1">
                  {aiResult.isAiGenerated
                    ? "✨ Generated by GPT-4o Mini — tailored for this job."
                    : "⚠️ AI not available at this moment — showing a fallback template from us."}
                </p>
              )}
            </DialogHeader>

            {aiResult ? (
              <div className="mt-5 space-y-8">
                {/* Resume Section */}
                {aiResult.resume && (
                  <div className="space-y-2">
                    <h4 className="font-semibold">Resume</h4>
                    <p className="text-sm whitespace-pre-line border rounded-md p-3 bg-muted">
                      {aiResult.resume}
                    </p>
                    <div className="flex gap-2 justify-end">
                      <Button
                        variant="outline"
                        className="min-w-[130px]"
                        onClick={() => handleCopy(aiResult.resume ?? "", "resume")}
                      >
                        {copiedSection === "resume"
                          ? "✓ Copied!"
                          : "Copy Resume"}
                      </Button>
                      <Button
                        onClick={handleSaveResume}
                        disabled={
                          resumeState === "saved" || resumeState === "loading"
                        }
                      >
                        {resumeState === "idle" && "Save"}
                        {resumeState === "loading" && "Saving..."}
                        {resumeState === "saved" && "Saved"}
                      </Button>
                    </div>
                  </div>
                )}

                {/* Cover Letter Section */}
                {aiResult.coverLetter && (
                  <div className="space-y-2">
                    <h4 className="font-semibold">Cover Letter</h4>
                    <p className="text-sm whitespace-pre-line border rounded-md p-3 bg-muted">
                      {aiResult.coverLetter}
                    </p>
                    <div className="flex gap-2 justify-end">
                      <Button
                        variant="outline"
                        className="min-w-[160px]"
                        onClick={() =>
                          handleCopy(aiResult.coverLetter ?? "", "cover")
                        }
                      >
                        {copiedSection === "cover"
                          ? "✓ Copied!"
                          : "Copy Cover Letter"}
                      </Button>
                      <Button
                        onClick={handleSaveCoverLetter}
                        disabled={
                          coverState === "saved" || coverState === "loading"
                        }
                      >
                        {coverState === "idle" && "Save"}
                        {coverState === "loading" && "Saving..."}
                        {coverState === "saved" && "Saved"}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <p className="text-muted-foreground mt-4">
                No AI result available.
              </p>
            )}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

export default AiResultDialog;
